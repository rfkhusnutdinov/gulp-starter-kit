// ==========================================
// Functions
// ==========================================
@use "sass:math";

/// Convert pixels to rem units
///
/// @param {Number} $px - The pixel value to convert
/// @param {Number} $base - The base font size (default: 16)
///
/// @return {Number} - The value in rem

@function rem($px, $base: 16) {
  @return math.div($px, $base) * 1rem;
}

/// Round a number to a given number of decimal places.
///
/// @param {Number} $number - The number to round.
/// @param {Number} $decimals [0] - The number of decimal places to round to. Must be a non-negative integer.
///
/// @return {Number} - The rounded number.

@function round($number, $decimals: 0) {
  $n: 1;
  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

/// Generate a fluid value using CSS `clamp()` based on viewport width.
///
/// This function calculates a responsive size that scales between a minimum
/// and maximum value using a linear interpolation between `$min-breakpoint`
/// and `$max-breakpoint`.
///
/// Requires that `$min-breakpoint` and `$max-breakpoint` be defined globally (in rem).
///
/// @param {Number} $min-size - Minimum size (in rem).
/// @param {Number} $max-size - Maximum size (in rem).
///
/// @return {String} - A CSS `clamp()` expression that produces a fluid value.

@function fluid($min-size, $max-size) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: round($slope * 100, 2);
  $intercept-rem: round($min-size - $slope * $min-breakpoint, 2);
  $min-size-rem: round($min-size, 2);
  $max-size-rem: round($max-size, 2);

  @return clamp(
    #{$min-size-rem},
    #{$slope-to-unit}vw + #{$intercept-rem},
    #{$max-size-rem}
  );
}

/// Generate a fluid value that decreases from `$max-size` to `$min-size` across breakpoints.
///
/// This is a wrapper around the `fluid()` function, which calculates a fluid size
/// that grows from 0 to `$max-size - $min-size`, and subtracts it from `$max-size`.
///
/// The result is a `calc()` expression that **decreases** with screen width:
/// - At the smallest screen (`$min-breakpoint`) → `$max-size`
/// - At the largest screen (`$max-breakpoint`) → `$min-size`
///
/// @param {Number} $min-size - The minimum size (in rem).
/// @param {Number} $max-size - The maximum size (in rem).
///
/// @return {String} - A `calc(...)` expression for a fluid value that decreases with screen width.

@function fluid-reverse($min-size, $max-size) {
  $size-rem: $max-size - $min-size;
  $fluid-value: fluid(rem(0), $size-rem);

  @return calc(#{$max-size} - #{$fluid-value});
}
